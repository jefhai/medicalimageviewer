package medicalimageviewer.views;

import java.awt.CardLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import medicalimageviewer.memento.IteratorCareTaker;
import medicalimageviewer.memento.IteratorMemento;
import medicalimageviewer.models.Study;
import medicalimageviewer.models.iterator.*;
import medicalimageviewer.IndexDecorator.IndexDecorator;

/**
 * The view for the whole project
 *
 * @author Jeffrey Haines 
 */
public class ViewerFrame extends javax.swing.JFrame {
    private Study study;
    private ArrayList<StudyImageIterator> iterators;
    private final IteratorCareTaker careTaker;
    private int index;
    
    /**
     * Creates new form MedicalImageViewerFrame
     * @author Jeffrey Haines
     */
    public ViewerFrame() {
        initComponents();
        careTaker = new IteratorCareTaker();
    }
    
    /**
     * Update the Image in the jFrame
     * Updates the UI with the current contents of the image iterator
     * @author Jeffrey Haines
     */
    private void updateImage() {        
        JLabel[] labels = {jLabel2, jLabel3, jLabel4, jLabel5};

        switch(study.getMode()) 
        {
            case 0: jLabel1.setIcon(new ImageIcon(iterators.get(0).getImages(study)[0]));
                    SingleViewButton.setSelected(true);
                    QuadViewButton.setSelected(false);
                    WindowViewButton.setSelected(false);
                    ReconstructionViewButton.setSelected(false);
                    ((CardLayout)View.getLayout()).show(View,"card0");
                    break;
                
            case 1: for(int i=0; i<4; i++) 
                    {
                        BufferedImage img = iterators.get(1).getImages(study)[i];
                        if(img!=null)
                            labels[i].setIcon(new ImageIcon(iterators.get(1).getImages(study)[i]));
                        else 
                            labels[i].setIcon(null);
                    }
                    SingleViewButton.setSelected(false);
                    QuadViewButton.setSelected(true);
                    WindowViewButton.setSelected(false);
                    ReconstructionViewButton.setSelected(false);
                    ((CardLayout)View.getLayout()).show(View,"card1");
                    break;
                
            case 2: jLabel6.setIcon(new ImageIcon(iterators.get(2).getImages(study)[0]));
                    SingleViewButton.setSelected(false);
                    QuadViewButton.setSelected(false);
                    WindowViewButton.setSelected(true);
                    ReconstructionViewButton.setSelected(false);
                    ((CardLayout)View.getLayout()).show(View,"card2");
                    break;

            case 3: IndexDecorator dec = new IndexDecorator(iterators.get(4).getIndex(), iterators.get(5).getIndex());
                    jLabel7.setIcon(new ImageIcon(dec.draw(study.getRec().construct2D('z', iterators.get(3).getIndex()))));
                    jLabel8.setIcon(new ImageIcon(dec.drawCor(iterators.get(4).getImages(study)[0])));
                    jLabel9.setIcon(new ImageIcon(dec.drawSag(iterators.get(5).getImages(study)[0])));
                    SingleViewButton.setSelected(false);
                    QuadViewButton.setSelected(false);
                    WindowViewButton.setSelected(false);
                    ReconstructionViewButton.setSelected(true);
                    ((CardLayout)View.getLayout()).show(View,"card3");
                    break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SystemGroup = new javax.swing.ButtonGroup();
        IteratorGroup = new javax.swing.ButtonGroup();
        ViewGroup = new javax.swing.ButtonGroup();
        MedicalImageViewerToolBar = new javax.swing.JToolBar();
        OpenStudyButton = new javax.swing.JButton();
        SaveStudyButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        SingleViewButton = new javax.swing.JToggleButton();
        QuadViewButton = new javax.swing.JToggleButton();
        WindowViewButton = new javax.swing.JToggleButton();
        ReconstructionViewButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        PrevImageButton = new javax.swing.JButton();
        NextImageButton = new javax.swing.JButton();
        View = new javax.swing.JPanel();
        SingleImage = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        QuadImage = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        WindowImage = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        ReconstructionWindow = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        MedicalImageViewerMenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        OpenStudy = new javax.swing.JMenuItem();
        SaveStudy = new javax.swing.JMenuItem();
        SaveAsStudy = new javax.swing.JMenuItem();
        MakeDefault = new javax.swing.JMenuItem();
        Undo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Medical Image Viewer");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        MedicalImageViewerToolBar.setFloatable(false);
        MedicalImageViewerToolBar.setRollover(true);

        OpenStudyButton.setText("Open");
        SystemGroup.add(OpenStudyButton);
        OpenStudyButton.setFocusable(false);
        OpenStudyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        OpenStudyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        OpenStudyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenStudyButtonActionPerformed(evt);
            }
        });
        MedicalImageViewerToolBar.add(OpenStudyButton);

        SaveStudyButton.setText("Save");
        SystemGroup.add(SaveStudyButton);
        SaveStudyButton.setFocusable(false);
        SaveStudyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SaveStudyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SaveStudyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveStudyButtonActionPerformed(evt);
            }
        });
        MedicalImageViewerToolBar.add(SaveStudyButton);
        MedicalImageViewerToolBar.add(jSeparator2);

        ViewGroup.add(SingleViewButton);
        SingleViewButton.setText("Single View");
        SingleViewButton.setFocusable(false);
        SingleViewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SingleViewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SingleViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SingleViewButtonActionPerformed(evt);
            }
        });
        MedicalImageViewerToolBar.add(SingleViewButton);

        ViewGroup.add(QuadViewButton);
        QuadViewButton.setText("Quad View");
        QuadViewButton.setFocusable(false);
        QuadViewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        QuadViewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        QuadViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuadViewButtonActionPerformed(evt);
            }
        });
        MedicalImageViewerToolBar.add(QuadViewButton);

        ViewGroup.add(WindowViewButton);
        WindowViewButton.setText("Window");
        WindowViewButton.setFocusable(false);
        WindowViewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        WindowViewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        WindowViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WindowViewButtonActionPerformed(evt);
            }
        });
        MedicalImageViewerToolBar.add(WindowViewButton);

        ViewGroup.add(ReconstructionViewButton);
        ReconstructionViewButton.setText("Reconstruction");
        ReconstructionViewButton.setFocusable(false);
        ReconstructionViewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ReconstructionViewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ReconstructionViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReconstructionViewButtonActionPerformed(evt);
            }
        });
        MedicalImageViewerToolBar.add(ReconstructionViewButton);
        MedicalImageViewerToolBar.add(jSeparator1);

        PrevImageButton.setText("Prev");
        IteratorGroup.add(PrevImageButton);
        PrevImageButton.setFocusable(false);
        PrevImageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PrevImageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PrevImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrevImageButtonActionPerformed(evt);
            }
        });
        MedicalImageViewerToolBar.add(PrevImageButton);

        NextImageButton.setText("Next");
        IteratorGroup.add(NextImageButton);
        NextImageButton.setFocusable(false);
        NextImageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        NextImageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        NextImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextImageButtonActionPerformed(evt);
            }
        });
        MedicalImageViewerToolBar.add(NextImageButton);

        View.setLayout(new java.awt.CardLayout());

        SingleImage.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        SingleImage.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setToolTipText("");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        SingleImage.add(jLabel1);

        View.add(SingleImage, "card0");

        QuadImage.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        QuadImage.setLayout(new java.awt.GridLayout(2, 2));
        QuadImage.add(jLabel2);
        QuadImage.add(jLabel3);
        QuadImage.add(jLabel4);
        QuadImage.add(jLabel5);

        View.add(QuadImage, "card1");

        WindowImage.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        WindowImage.setLayout(new java.awt.GridLayout(1, 0));

        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        WindowImage.add(jLabel6);

        View.add(WindowImage, "card2");

        ReconstructionWindow.setLayout(new java.awt.GridLayout(2, 2));

        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel7.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        ReconstructionWindow.add(jLabel7);

        jLabel8.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel8.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                SagMouseWheelMoved(evt);
            }
        });
        ReconstructionWindow.add(jLabel8);

        jLabel9.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel9.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                CorMouseWheelMoved(evt);
            }
        });
        ReconstructionWindow.add(jLabel9);

        View.add(ReconstructionWindow, "card3");

        FileMenu.setText("File");

        OpenStudy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenStudy.setText("Open");
        OpenStudy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenStudyButtonActionPerformed(evt);
            }
        });
        FileMenu.add(OpenStudy);

        SaveStudy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveStudy.setText("Save");
        SaveStudy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveStudyActionPerformed(evt);
            }
        });
        FileMenu.add(SaveStudy);

        SaveAsStudy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        SaveAsStudy.setText("Save As");
        SaveAsStudy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsStudyActionPerformed(evt);
            }
        });
        FileMenu.add(SaveAsStudy);

        MakeDefault.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MakeDefault.setText("Set Default");
        MakeDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeDefaultActionPerformed(evt);
            }
        });
        FileMenu.add(MakeDefault);

        Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        Undo.setText("Undo");
        Undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoActionPerformed(evt);
            }
        });
        FileMenu.add(Undo);

        MedicalImageViewerMenuBar.add(FileMenu);

        setJMenuBar(MedicalImageViewerMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(View, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MedicalImageViewerToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MedicalImageViewerToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(View, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Quad View Button Action Performed
     * @param evt the quad view button event
     * @author Jeffrey Haines
     */
    private void QuadViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuadViewButtonActionPerformed
        createIteratorMomento();
        iterators.add(1, new QuadImageIterator(index));
        index = iterators.get(1).getIndex();
        study.setMode(1);
        updateImage();
    }//GEN-LAST:event_QuadViewButtonActionPerformed
    
    /**
     * Single View Button Action Performed
     * @param evt the single view button event
     * @author Jeffrey Haines
     */
    private void SingleViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SingleViewButtonActionPerformed
        createIteratorMomento();
        iterators.add(0, new SingleImageIterator(index));
        study.setMode(0);
        updateImage(); 
    }//GEN-LAST:event_SingleViewButtonActionPerformed
    
    /**
     * Open Study Button Action Performed
     * @param evt the open study button event
     * @author Jeffrey Haines
     */
    private void OpenStudyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenStudyButtonActionPerformed
        File path = getStudyPath();
        if(path != null){
            study = new Study();
            iterators = study.open(path);
            study.save(iterators);
            if (iterators != null) 
            {
                index = iterators.get(0).getIndex();
                updateImage();
            }
        }
    }//GEN-LAST:event_OpenStudyButtonActionPerformed
    
    /**
     * Next Image Button Action Performed
     * @param evt the next button event
     * @author Jeffrey Haines
     */
    private void NextImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextImageButtonActionPerformed
        if(study.getMode() == 3)
            getNext(iterators.get(3));
        else if(study.getMode() == 2)
            getNext(iterators.get(2));
        else if(study.getMode() == 1)
            getNext(iterators.get(1));
        else if(study.getMode() == 0)
            getNext(iterators.get(0));
        updateImage();
    }//GEN-LAST:event_NextImageButtonActionPerformed
    
    /**
     * Previous Image Button Action Performed
     * @param evt the previous button event
     * @author Jeffrey Haines
     */
    private void PrevImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrevImageButtonActionPerformed
        if(study.getMode() == 3)
            getPrev(iterators.get(3));
        else if(study.getMode() == 2)
            getPrev(iterators.get(2));
        else if(study.getMode() == 1)
            getPrev(iterators.get(1));
        else if(study.getMode() == 0)
            getPrev(iterators.get(0));
            
        updateImage();
    }//GEN-LAST:event_PrevImageButtonActionPerformed
    
    /**
     * Form Mouse Wheel Moved
     * @param evt the mouse wheel moved event
     * @author Jeffrey Haines
     */
    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        int notches = evt.getWheelRotation();
        if (notches < 0) 
        {
            if(study.getMode() == 3)
                getPrev(iterators.get(3));
            else if(study.getMode() == 2)
                getPrev(iterators.get(2));
            else if(study.getMode() == 1)
                getPrev(iterators.get(1));
            else if(study.getMode() == 0)
                getPrev(iterators.get(0));
        }
        else if (notches > 0) 
        {
            if(study.getMode() == 3)
                getNext(iterators.get(3));
            else if(study.getMode() == 2)
                getNext(iterators.get(2));
            else if(study.getMode() == 1)
                getNext(iterators.get(1));
            else if(study.getMode() == 0)
                getNext(iterators.get(0));
        }
        updateImage();
    }//GEN-LAST:event_formMouseWheelMoved
   
    /**
     * Save Study Button Action Performed
     * @param evt the save study button event
     * @author Jeffrey Haines
     */
    private void SaveStudyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveStudyButtonActionPerformed
        if(iterators != null ){
            study.save(iterators);
        }
    }//GEN-LAST:event_SaveStudyButtonActionPerformed
    
    /**
     * For Window Opened
     * @param the form window opened event
     * @author Jeffrey Haines
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        study = new Study();
        File file = study.readDefault();
        if (file != null) 
            this.iterators = study.open(file);
        else 
            this.iterators = study.open(getStudyPath());
        index = iterators.get(0).getIndex();
        study.save(iterators);
        
        updateImage();
    }//GEN-LAST:event_formWindowOpened
    
    /**
     * Save Study Action Performed
     * @param the save study action event
     * @author Jeffrey Haines
     */
    private void SaveStudyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveStudyActionPerformed
        study.save(iterators);
    }//GEN-LAST:event_SaveStudyActionPerformed
    
    /**
     * Save As Study Action Performed
     * @param evt the save as action event
     * @author Jeffrey Haines
     */
    private void SaveAsStudyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsStudyActionPerformed
        saveStudyAtPath();
    }//GEN-LAST:event_SaveAsStudyActionPerformed
    
    /**
     * Make Default Action Performed
     * @author Jeffrey Haines
     */
    private void MakeDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeDefaultActionPerformed
        study.setDefault();
    }//GEN-LAST:event_MakeDefaultActionPerformed
    
    /**
     * Form Window Closing
     * @param evt the window close event
     * @author Jeffrey Haines
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int showConfirmDialog = -1;
        if(!study.checkWithSaved(iterators)) 
        {
            showConfirmDialog = JOptionPane.showConfirmDialog(null, "Would you like to save before you quit?");
            if(showConfirmDialog == 0) {
                study.save(iterators); 
                System.exit(0);
            } else if (showConfirmDialog == 1)
                System.exit(0);   
        }
        if (showConfirmDialog != 2)
            System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    /**
     * Window View Button Action Performed
     * @param evt the window view button event
     * @author Jeffrey Haines
     */
    private void WindowViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WindowViewButtonActionPerformed
        createIteratorMomento();
        JTextField min = new JTextField();
        JTextField max = new JTextField();
        final JComponent[] inputs = new JComponent[] {
                        new JLabel("Minimum"),
                        min,
                        new JLabel("Maximum"),
                        max
        };
        JOptionPane.showMessageDialog(null, inputs, "Enter window values", JOptionPane.PLAIN_MESSAGE);
        iterators.add(2, new WindowImageIterator(index, Integer.parseInt(min.getText()), Integer.parseInt(max.getText())));
        study.setMode(2);
        updateImage();
    }//GEN-LAST:event_WindowViewButtonActionPerformed

    /**
     * Reconstruction View Button Action Performed
     * @param evt the reconstruction view button event
     * @author Jeffrey Haines
     */
    private void ReconstructionViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReconstructionViewButtonActionPerformed
        iterators.add(3, new SingleImageIterator(index));
        iterators.add(4, new SagImageIterator(study, iterators.get(4).getIndex()));
        iterators.add(5, new CorImageIterator(study, iterators.get(5).getIndex()));
        study.setMode(3);
        updateImage();
    }//GEN-LAST:event_ReconstructionViewButtonActionPerformed

    /**
     * Sagittal Mouse Wheel Moved
     * @param evt the sagittal mouse wheel event
     * @author Jeffrey Haines
     */
    private void SagMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_SagMouseWheelMoved
        int notches = evt.getWheelRotation();
        if (notches < 0) 
            getPrev(iterators.get(4));
        else if (notches > 0) 
            getNext(iterators.get(4));
        updateImage();
    }//GEN-LAST:event_SagMouseWheelMoved

    /**
     * Coronal Mouse Wheel Moved
     * @param evt the coronal mouse wheel event
     * @author Jeffrey Haines
     */
    private void CorMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_CorMouseWheelMoved
        int notches = evt.getWheelRotation();
        if (notches < 0) 
            getPrev(iterators.get(5));
        else if (notches > 0) 
            getNext(iterators.get(5));
        updateImage();
    }//GEN-LAST:event_CorMouseWheelMoved

    /**
     * Undo Action Performed
     * @param evt the undo action event
     * @author Jeffrey Haines
     */
    private void UndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoActionPerformed
        iterators = setIteratorMomento();
        updateImage();
    }//GEN-LAST:event_UndoActionPerformed

    /**
     * Get Study Path
     * @return the studies file path
     * @author Jeffrey Haines
     */
    private File getStudyPath() {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("C:\\")); 
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
            return chooser.getSelectedFile();
        return null;
    }
    
    /**
     * Save Study At Path
     * @author Jeffrey Haines
     */
    private void saveStudyAtPath() {
        JFileChooser chooser = new JFileChooser(study.getPath());
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showSaveDialog(new JFormattedTextField()) == JFileChooser.APPROVE_OPTION)
            study = study.saveAs(iterators, chooser.getSelectedFile()); 
    }
    
    /**
     * Get Next
     * @param it the iterator to be incremented
     * @author Jeffrey Haines
     */
    private void getNext(StudyImageIterator it) {
        it.next(study);
        index = it.getIndex();
    }
    
    /**
     * Get Previous
     * @param it the iterator to be decremented
     * @author Jeffrey Haines
     */
    private void getPrev(StudyImageIterator it) {
        it.prev();
        index = it.getIndex();
    }
    
    /**
     * Create Iterator Memento
     * @author Jeffrey Haines
     */
    private void createIteratorMomento() {
        careTaker.push(new IteratorMemento(iterators, study.getMode()));
    }
    
    /**
     * Set Iterator Memento
     * @return the memento object to be sent to care taker
     * @author Jeffrey Haines
     */
    private ArrayList<StudyImageIterator> setIteratorMomento() {
        IteratorMemento m = careTaker.pop();
        study.setMode(m.getMode());
        return m.getIterator();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu FileMenu;
    private javax.swing.ButtonGroup IteratorGroup;
    private javax.swing.JMenuItem MakeDefault;
    private javax.swing.JMenuBar MedicalImageViewerMenuBar;
    private javax.swing.JToolBar MedicalImageViewerToolBar;
    private javax.swing.JButton NextImageButton;
    private javax.swing.JMenuItem OpenStudy;
    private javax.swing.JButton OpenStudyButton;
    private javax.swing.JButton PrevImageButton;
    private javax.swing.JPanel QuadImage;
    private javax.swing.JToggleButton QuadViewButton;
    private javax.swing.JToggleButton ReconstructionViewButton;
    private javax.swing.JPanel ReconstructionWindow;
    private javax.swing.JMenuItem SaveAsStudy;
    private javax.swing.JMenuItem SaveStudy;
    private javax.swing.JButton SaveStudyButton;
    private javax.swing.JPanel SingleImage;
    private javax.swing.JToggleButton SingleViewButton;
    private javax.swing.ButtonGroup SystemGroup;
    private javax.swing.JMenuItem Undo;
    private javax.swing.JPanel View;
    private javax.swing.ButtonGroup ViewGroup;
    private javax.swing.JPanel WindowImage;
    private javax.swing.JToggleButton WindowViewButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
